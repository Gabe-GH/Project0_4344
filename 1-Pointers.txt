Pointers in C
-------------

1) Consider the following C program.
#include <string.h>
int main(int argc, char *argv[])
{
  char *temp;
  strcpy(temp, argv[0]);
  return 0;
}

Why is the above code incorrect (i.e., likely to crash)?
There isn't any memory allocated for the pointer temp. The pointer needs memory reserved
to hold the c-string 

2) Consider the following C program.
#include <string.h>
int main(int argc, char *argv[])
{
  char temp[9];
  strcpy(temp, argv[0]);
  return 0;
}

A buffer overflow occurs when the program name is 9 characters long
(e.g., "12345.exe"). Why?
Currently the program name is being copied to the char array which has
9 positions available, including the final index being occupied by the
end character of strings \0. This causes a program name of 9 characters
causing an overflow.


3) Consider the following C program.
#include <string.h>
int main(int argc, char *argv[])
{
  char *buffer = "Hello";
  strcpy(buffer, "World");
  return 0;
}

Why does this program crash?
The string being pointed to by buffer is being stored in read-only memory.
Trying to modify the string in memory will cause a crash even if it is the correct
length.


4) Consider the following C snippet.
void myfunc()
{
  char b[100];
  char *buffer = &b[0];
  strcpy(buffer, "World");
}

Is this correct?  What's a simpler expression for &b[0]?
Since we're using an array we can just use the expression
char *buffer = b; because using an array name without index
will assign the array's memory address of index 0 to the pointer.


5) Consider the following C program.
#include <stdio.h>
int main(int argc, char* argv[])
{
  printf("%s %s %s\n", *argv, (*(argv+1)) + 2, *(argv+2));
  return 0;
}

If this code is executed using the following line, what will be the output?
> program1 -n5 abc
Output: program1 5 abc


6) Consider the following C program.
#include <stdio.h>
#include <string.h>
char *myfunc(char **argv)
{
  char buffer[100];
  strcpy(buffer, "hello");
  return buffer;
}
int main(int argc, char *argv[])
{
  char *s = myfunc(argv);
  printf("%s\n", s);
}

What's wrong with this?
The function myfunc is returning an array that was allocated
locally in scope terms. Once the function is exited the memory allocated
for that array is released. The array will need to be dynamically allocated in
order to return it to main.
