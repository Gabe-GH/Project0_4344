Part Two: Fixing the Bugs
-------------------------

Understanding the code

  1) Explain why this program uses the exclamation operator with the
     strcmp() function.

     strcmp() returns an integer after comparing the strings provided. If both strings
     are equal to each other strcmp() returns a 0. Zero is seen as false
     when evaluated as a boolean. So !strcmp() is used to check if both strings
     are in fact equal to each other and if !false is evaluated it's actually true.

  2) Explain why the 'LENGTH' macro returns the length of an array.
     Would it work with a pointer to a dynamically allocated array? (Hint:
     understand sizeof).

     LENGTH returns the length of the array because it is taking dividing the total number of
     bytes taken up by the array by the amount of bytes of each element. For example If an int 
     is 4 bytes and an array of ints returns a sizeof 20 bytes, when divided by the size of 
     the element (int) we find that the array has 5 elements. 
     This will not work with a pointer to dynamically allocated because the amount of memory to be
     allocated needs to be known at runtime to use sizeof(). Since we don't, sizeof() will
     return the amount of bytes of a pointer which is 8 bytes.

Bug hunting

  3) Explain and fix the logical flow bug within the switch statement.
     (What happens when the -h option is used?)
     The argument -h is passed when executing the program 
     and a help is message is given for the user, but was not breaking
     since it was missing the break statement.

  4) Explain and fix the argument parsing error. (Why is entrycount never
     zero?)
     Entry count is never zero because entry count is always being incremented
     due to counting the program name as an argument.

  5) Fix print_result() to print results correctly and in the same order
     as the words were specified on the command line.  Explain your solution.
     Added a temporary variable, 'i', to act as a counter and fixed the print statments to print 
     the index i of the arrays with i incrementing after each print while there are still arguments
     to print.
